#! /usr/bin/env python3
"""Control OLED display brightness by applying ICC color profiles.

icc-brightness brightness max-brightness - set brightness manually
icc-brightness apply - apply brightness from system setting
icc-brightness watch - continuously update to system setting
icc-brightness clean - remove all profiles generated by us
"""

import sys
import os
import subprocess
import fcntl
import signal
import logging
import time
from threading import Lock
from typing import Optional, List
from functools import lru_cache

TEMP_FOLDER = '/tmp'
BACKLIGHT_PATH = '/sys/class/backlight/intel_backlight'
BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'brightness')
MAX_BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'max_brightness')
with open(MAX_BRIGHTNESS_PATH) as infile:
    MAX_BRIGHTNESS = int(infile.readline())

CWD = os.path.dirname(__file__)
ICC_BRIGHTNESS_GEN = os.path.join(CWD, 'icc-brightness-gen')

BRIGHTNESS_GOAL_LOCK = Lock()
BRIGHTNESS_GOAL = None


def adjuster_thread():
    global BRIGHTNESS_GOAL
    while True:
        time.sleep(0.1)
        BRIGHTNESS_GOAL_LOCK.acquire()
        goal = BRIGHTNESS_GOAL
        BRIGHTNESS_GOAL = None
        BRIGHTNESS_GOAL_LOCK.release()
        if goal is None:
            continue
        try:
            icc_brightness(goal)
        except Exception:
            logging.exception("Brightness adjuster thread raised an Exception!")


def clean() -> None:
    """Find all non-active profiles generated by us and remove them """
    active_object_path = get_object_path(
        subprocess.check_output(['colormgr', 'device-get-default-profile', get_device_id()]))
    out = subprocess.check_output(['colormgr', 'get-profiles']).decode('utf-8')

    object_path = None
    for line in out.splitlines():
        if line.startswith('Object Path:'):
            object_path = line.split(':')[1].lstrip()
            continue
        if line.startswith('Filename:'):
            filename = line.split(':')[1].lstrip()
            if "/brightness_" not in filename:
                continue
            if object_path == active_object_path:
                logging.debug("Skipping cleaning the active profile")
                continue
            logging.info('Removing: %s', filename)
            subprocess.run(['colormgr', 'delete-profile', object_path], check=True)
            subprocess.run(['rm', filename], check=True)


def get_item(out: bytes, name: str) -> str:
    for line in out.decode('utf8').split('\n'):
        if line.startswith(name):
            return line.split(':')[1].lstrip()
    raise Exception(f"No item found with name {name!r} in {out!r}")


def get_object_path(out: bytes) -> str:
    """ Given the output from a colormgr command, return the line labeled 'Object Path' """
    return get_item(out, 'Object Path:')


def get_filename(out: bytes) -> str:
    return get_item(out, 'Filename:')


def find_profile(filename: str) -> Optional[str]:
    """ Get the colormgr identifier for the profile at the given path.
        Returns None if no profile is found with that filename. """
    try:
        out = subprocess.check_output(['colormgr', 'find-profile-by-filename', filename])
        return get_object_path(out)
    except subprocess.CalledProcessError as e:
        if b"does not exist" in e.stdout:
            return None
        raise e


@lru_cache
def get_device_id() -> str:
    """ Get the name of the main device ID """
    out = subprocess.check_output(['colormgr', 'get-devices-by-kind', 'display'])
    return get_object_path(out)


def subprocess_run_retry(cmd: List[str], num_attempts: int = 0) -> None:
    try:
        subprocess.run(cmd, capture_output=True, check=True)
    except subprocess.CalledProcessError as e:
        if num_attempts > 5:
            raise e
        logging.debug(f"Retrying after {e.stdout!r}")
        subprocess_run_retry(cmd, num_attempts=num_attempts + 1)


def icc_brightness(brightness: int) -> None:
    """ Immediately set the screen brightness """
    clean()
    icc_filename = 'brightness_%d_%d.icc' % (brightness, MAX_BRIGHTNESS)
    if icc_filename in get_filename(
            subprocess.check_output(['colormgr', 'device-get-default-profile', get_device_id()])):
        logging.debug("Skipping setting brightness because it is already set to the current value")
        return

    icc_filepath = os.path.join(TEMP_FOLDER, icc_filename)
    subprocess.run([ICC_BRIGHTNESS_GEN, icc_filepath, str(brightness), str(MAX_BRIGHTNESS)], check=True)
    subprocess_run_retry(['timeout', '0.1', 'colormgr', 'import-profile', icc_filepath])
    object_path = find_profile(icc_filename)
    assert object_path is not None
    subprocess.run(['colormgr', 'device-add-profile', get_device_id(), object_path], check=True)
    subprocess.run(['colormgr', 'device-make-profile-default', get_device_id(), object_path], check=True)


def icc_brightness_apply() -> None:
    """ Queue up a brightness change to be applied after the debounce timeout """
    global BRIGHTNESS_GOAL
    with open(BRIGHTNESS_PATH) as f:
        brightness = int(f.readline())
    with BRIGHTNESS_GOAL_LOCK:
        BRIGHTNESS_GOAL = brightness


def handler(*_):
    icc_brightness_apply()


def main():
    logging.basicConfig(level=logging.WARNING, format='%(levelname)s: %(message)s')

    if len(sys.argv) == 2 and sys.argv[1] == 'clean':
        clean()

    elif len(sys.argv) == 2 and sys.argv[1] == 'apply':
        icc_brightness_apply()

    elif len(sys.argv) == 2 and sys.argv[1] == 'watch':
        icc_brightness_apply()
        signal.signal(signal.SIGIO, handler)
        fd = os.open(BACKLIGHT_PATH, os.O_RDONLY)
        fcntl.fcntl(fd, fcntl.F_SETSIG, 0)
        fcntl.fcntl(fd, fcntl.F_NOTIFY, fcntl.DN_MODIFY | fcntl.DN_MULTISHOT)

        # Sleep until we get a keyboard interrupt
        adjuster_thread()
    elif len(sys.argv) == 3:
        brightness = int(sys.argv[1])
        max_brightness = int(sys.argv[2])
        icc_brightness(brightness, max_brightness)

    else:
        print(__doc__)


if __name__ == '__main__':
    main()
